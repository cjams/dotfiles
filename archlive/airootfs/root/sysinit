#!/bin/bash

reset="\e[0m"
bold="\e[1m"
red="\e[31m"
green="\e[32m"
yellow="\e[33m"
cyan="\e[36m"
white="\e[97m"

bold_red="\e[1;31m"
bold_green="\e[1;32m"
bold_yellow="\e[1;33m"
bold_cyan="\e[1;36m"
bold_white="\e[1;39m"

echo_bold_red()
{
    echo -e "$bold_red$1 $reset"
}

echo_bold_green()
{
    echo -e "$bold_green$1 $reset"
}

echo_bold_yellow()
{
    echo -e "$bold_yellow$1 $reset"
}

echo_bold_cyan()
{
    echo -e "$bold_cyan$1 $reset"
}

echo_bold_white()
{
    echo -e "$bold_white$1 $reset"
}

echo_error()
{
    echo "ERROR: $1"
    echo_usage
    exit 1
}

device=""
city=""
host="dev"
table="msdos"
fs="ext4"
region="America"

short_opts="d:p:f:c:n:h"
long_opts="disk:,partition-table:,filesystem:,city:,name:,help"

echo_usage()
{
    echo "Usage:"
    echo "  sysinit -d|--disk <disk> [options]"
    echo ""
    echo "Overview:"
    echo "  Initialize the Arch Linux system using /dev/<disk> as the device"
    echo "  for the root filesystem. The device will be formatted with a new"
    echo "  partition table and filesystem."
    echo ""
    echo "Options:"
    echo "  -p, --partition-table   gpt | msdos (default: $table)"
    echo "  -f, --filesystem        filesystem type (default: $fs)"
    echo "  -c, --city              city for timezone (default: $city)"
    echo "  -n, --name              hostname (default: $host)"
    echo "  -h, --help              print this help"
    echo ""
}

#
# Parse options
#
if [[ $# -lt 2 ]]; then
    echo_usage
    exit 1
fi

options=$(getopt -o $short_opts -l $long_opts -- "$@")
if [[ $? -ne 0 ]]; then
    echo_error "invalid options"
    echo_usage
    exit 1
fi

eval set -- "$options"
while true; do
    case "$1" in
        -p|--partition-table) table="$2";;
        -f|--filesystem) fs="$2";;
        -c|--city) city="$2";;
        -n|--name) host="$2";;
        -d|--device) device="/dev/$2";;
        -h|--help) echo_usage && exit;;
        --) break;;
        *) echo_error "unknown option: $1";;
    esac
    shift 2
done

case "$table" in
    gpt|GPT) table=gpt;;
    msdos|MSDOS|DOS) table=msdos;;
    *) echo_error "unsupported partition table: $table";;
esac

#
# Confirm installation parameters
#
echo "  ___           _       _     _                   ";
echo " / _ \         | |     | |   (_)                  ";
echo "/ /_\ \_ __ ___| |__   | |    _ _ __  _   ___  __ ";
echo "|  _  | '__/ __| '_ \  | |   | | '_ \| | | \ \/ / ";
echo "| | | | | | (__| | | | | |___| | | | | |_| |>  <  ";
echo "\_| |_/_|  \___|_| |_| \_____/_|_| |_|\__,_/_/\_\ ";
echo "                                                  ";

echo_bold_cyan "Installation Parameters:"
echo -n "  - rootfs device: " && echo_bold_white "$device"
echo -n "  - rootfs type: " && echo_bold_white "$fs"
echo -n "  - rootfs partition table: " && echo_bold_white "$table"
echo -n "  - city in current timezone: " && echo_bold_white "$city"
echo -n "  - hostname: " && echo_bold_white "$host"

echo -ne "$bold_yellow"
echo -ne "Format $device with new $table? [y/n]: $reset"
read -N 1 format
echo ""

if [[ $format != "y" ]]; then
    echo_bold_white "Format cancelled! Exiting..."
    exit 1
fi

echo "-> Updating the system clock"
timedatectl set-ntp true

#
# Format the device
#
echo "-> Formatting $device with $table"
parted -s $device mklabel $table

echo -n "-> Creating new partition: "
begin="2MiB"
end="100%"
parted -s $device mkpart primary $fs $begin $end
partition=$(lsblk -lp | grep $device | head -2 | tail -1 | awk '{print $1}')
echo "$partition"

#
# Create and mount the filesystem
#
echo "-> Creating the root $fs filesystem on $partition"
mkfs.$fs $partition

echo "-> Mounting $partition onto /mnt"
mount $partition /mnt

#
# Copy the root filesystem to /mnt
#
echo -n "-> Copying the archiso to /mnt..."
cp -ax / /mnt
echo "done"

echo -n "-> Copying the kernel to /mnt/boot..."
cp -aT \
    /run/archiso/bootmnt/arch/boot/$(uname -m)/vmlinuz \
    /mnt/boot/vmlinuz-linux
echo "done"

echo "-> Generating /etc/fstab"
genfstab -U /mnt >> /mnt/etc/fstab

echo "-> Chrooting into the new system"
arch-chroot /mnt /bin/bash

echo "-> Configuring /etc/systemd/journald.conf"
sed -i 's/Storage=volatile/#Storage=auto/' /etc/systemd/journald.conf

echo "-> Removing presumptuous dhcpcd udev rules"
rm /etc/udev/rules.d/81-dhcpcd.rules

echo "-> Disabling archiso systemd services"
systemctl disable pacman-init.service choose-mirror.service
rm -r /etc/systemd/system/{choose-mirror.service,pacman-init.service}
rm -r /etc/systemd/system/{etc-pacman.d-gnupg.mount,getty@tty1.service.d}
rm /etc/systemd/scripts/choose-mirror

echo "-> Removing archiso scripts"
rm /etc/systemd/system/getty@tty1.serivice.d/autologin.conf
rm /root/{.automated_script.sh,.zlogin}
rm /etc/mkinitcpio-archiso.conf
rm -r /etc/initcpio

echo "-> Importing archlinux master keys"
pacman-key --init
pacman-key --populate archlinux

echo "-> Setting /etc/localtime: $region/$city"
ln -sf /usr/share/zoneinfo/$region/$city /etc/localtime

echo "-> Setting the hardware clock"
hwclock --systohc

echo "-> Setting locale"
sed -i 's/#en_US\.UTF-8/en_US.UTF-8/' /etc/locale.gen
locale-gen
echo LANG=en_US.UTF-8 > /etc/locale.conf

echo "-> Setting /etc/hostname: $host"
echo $host > /etc/hostname


# TODO: networking and booting
