#!/bin/bash
set -e

reset="\e[0m"
bold="\e[1m"
red="\e[91m"
green="\e[92m"
yellow="\e[93m"
blue="\e[94m"
cyan="\e[96m"
white="\e[99m"

bold_red="\e[1;91m"
bold_green="\e[1;92m"
bold_yellow="\e[1;93m"
bold_blue="\e[1;94m"
bold_cyan="\e[1;96m"
bold_white="\e[1;99m"

echo_bold_red()
{
    echo -e "$bold_red$1 $reset"
}

echo_bold_green()
{
    echo -e "$bold_green$1 $reset"
}

echo_bold_yellow()
{
    echo -e "$bold_yellow$1 $reset"
}

echo_bold_cyan()
{
    echo -e "$bold_cyan$1 $reset"
}

echo_bold_white()
{
    echo -e "$bold_white$1 $reset"
}

echo_error()
{
    echo "ERROR: $1"
    echo_usage
    exit 1
}

echo_milestone()
{
    echo -e "$bold_green==>$reset $bold_white$1$reset"
}

echo_task()
{
    echo -e "  $bold_cyan->$reset $bold_white$1$reset"
}

dev=""
city="Denver"
boot="bios"
host="dev"
user="dev"
label="msdos"
fs="ext4"
region="America"

short_opts="b:d:p:f:c:n:u:h"
long_opts="boot:,disk:,part-label:,fs:,city:,name:,user:,help"

echo_usage()
{
    echo "Usage:"
    echo "  install -b | --boot <boot> -d | --disk <disk> [options]"
    echo ""
    echo "Overview:"
    echo "  Install the Arch Linux system using /dev/<disk> as the device"
    echo "  for the root filesystem. The device will be formatted with a new"
    echo "  partition label and filesystems. Two partitions will be created,"
    echo "  one for / and one for /boot. The filesystem for / may be configured"
    echo "  if the user doesn't want to use the default ext4."
    echo ""
    echo "  You may create a non-root user by supplying the name to the -u"
    echo "  option. This will create a user with the supplied name, and the "
    echo "  user will be added to the wheel group to enable sudo powers. Both"
    echo "  The root and non-root user will need to have their passwords set"
    echo "  after the installation if desired (see man passwd)."
    echo ""
    echo "Options:"
    echo "  -b, --boot         uefi | bios (default: $boot)"
    echo "  -p, --part-label   gpt | msdos (default: $label)"
    echo "  -d, --disk         parition /dev/<disk>"
    echo "  -f, --fs           / flesystem type (default: $fs)"
    echo "  -c, --city         city for timezone (default: $city)"
    echo "  -n, --name         hostname (default: $host)"
    echo "  -u, --user         user name (default: $user)"
    echo "  -h, --help         print this help"
    echo ""
}

ckopt_boot()
{
    case "$boot" in
        u|uefi|U|UEFI) boot=uefi;;
        b|bios|B|BIOS) boot=bios;;
        *) echo_error "unsupported boot type: $boot" && exit
    esac
}

ckopt_label()
{
    case "$label" in
        g|gpt|G|GPT) label=gpt;;
        m|msdos|M|MSDOS) label=msdos;;
        *) echo_error "unsupported partition label: $label" && exit;;
    esac

    if [[ $label == "gpt" && $boot != "uefi" ]]; then
        echo_error "UEFI must be used with a GPT label" && exit
    fi
}

#
# Verify arguments
#
if [[ $# -lt 4 ]]; then
    echo_error "Too few arguments"
    echo_usage
    exit
fi

options=$(getopt -o $short_opts -l $long_opts -- "$@")
if [[ $? -ne 0 ]]; then
    echo_error "invalid options"
    echo_usage
    exit 1
fi

eval set -- "$options"
while true; do
    case "$1" in
        -b|--boot) boot="$2";;
        -p|--part-label) label="$2";;
        -f|--fs) fs="$2";;
        -c|--city) city="$2";;
        -n|--name) host="$2";;
        -u|--user) user="$2";;
        -d|--disk) dev="/dev/$2";;
        -h|--help) echo_usage && exit;;
        --) break;;
        *) echo_error "unknown option: $1";;
    esac
    shift 2
done

ckopt_boot
ckopt_label

#
# Display banner
#
echo "  ___           _       _     _                   ";
echo " / _ \         | |     | |   (_)                  ";
echo "/ /_\ \_ __ ___| |__   | |    _ _ __  _   ___  __ ";
echo "|  _  | '__/ __| '_ \  | |   | | '_ \| | | \ \/ / ";
echo "| | | | | | (__| | | | | |___| | | | | |_| |>  <  ";
echo "\_| |_/_|  \___|_| |_| \_____/_|_| |_|\__,_/_/\_\ ";
echo "                                                  ";

#
# Confirm installation parameters
#
echo_bold_green "Installation Parameters:"
echo -n "  - rootfs partition label: " && echo_bold_white "$label"
echo -n "  - rootfs device: " && echo_bold_white "$dev"
echo -n "  - rootfs type: " && echo_bold_white "$fs"
echo -n "  - boot type: " && echo_bold_white "$boot"
echo -n "  - host name: " && echo_bold_white "$host"
echo -n "  - user name: " && echo_bold_white "$user"
echo -n "  - timezone city: " && echo_bold_white "$city"

echo -ne "$bold_yellow"
echo -ne "Format $dev with new $label? [y/n]: $reset"
read -N 1 format
echo ""

if [[ $format != "y" ]]; then
    echo_bold_white "Format cancelled...exiting"
    exit 1
fi

echo_milestone "Updating the system clock"
timedatectl set-ntp true

#
# Format the device
#
echo_milestone "Formatting $dev with $label"
wipefs --quiet --all $dev
parted -s $dev mklabel $label

begin="2MiB"
end="512MiB"
parted -s $dev mkpart primary $begin $end
parted -s $dev set 1 boot on

begin=$end
end="100%"
parted -s $dev mkpart primary $begin $end

boot_part=$(lsblk -lpo NAME | grep $dev | head -2 | tail -1)
boot_size=$(lsblk -lpo SIZE | grep $dev | head -2 | tail -1)
echo_task "Created $boot_size /boot partition: $boot_part"

root_part=$(lsblk -lpo NAME | grep $dev | head -3 | tail -1)
root_size=$(lsblk -lpo SIZE | grep $dev | head -3 | tail -1)
echo_task "Created $root_size /     partition: $root_part"

#
# Make and mount the filesystems
#
echo_task "Making the $fs root fs on $root_part"
mkfs.$fs -q $root_part

echo_task "Making the vfat boot fs on $boot_part"
mkfs.vfat $boot_part

mount $root_part /mnt
mkdir /mnt/boot
echo_task "Mounted $root_part onto /mnt"

mount $boot_part /mnt/boot
echo_task "Mounted $boot_part onto /mnt/boot"

#
# Copy the root filesystem to /mnt
#
echo_milestone "Installing the root fs to the new root"
echo_task "Copying the archiso to /mnt..."
cp -ax / /mnt

echo_task "Copying the kernel to /mnt/boot..."
cp -aT \
    /run/archiso/bootmnt/arch/boot/$(uname -m)/vmlinuz \
    /mnt/boot/vmlinuz-linux

genfstab -U /mnt >> /mnt/etc/fstab
echo_task "Generated /mnt/etc/fstab"

echo_milestone "Chrooting into the new system..."
arch-chroot /mnt /root/install-chroot $region $city $host $user
